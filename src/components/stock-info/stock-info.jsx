import React from 'react';import Chart from "react-google-charts";import axios from 'axios';import classNames from "classnames";import './stock-info.scss';import {StocksContext} from "../../contexts/stocks-context";import Locale from "../../locale";import Loader from "../loader";class StockInfo extends React.Component {    static contextType = StocksContext;    state = {        inputCount: "",        loading: false,        data: undefined,        maxPrice: 150,        minPrice: 0,        stock: {}    };    componentDidMount() {        this.setState({ loading: true });        axios.get(`https://financialmodelingprep.com/api/v3/historical-price-full/${this.props.stockInfo.symbol}?timeseries=30`).then(responce => {            let data = [['day', responce.data.symbol, responce.data.symbol, responce.data.symbol, responce.data.symbol]],                historical = responce.data.historical,                maxPrice = 0,                minPrice = Infinity;            historical.forEach(({ date, open, high, low, close, change }) => {                if (high > maxPrice) {                    maxPrice = high;                }                if (low < minPrice) {                    minPrice = low;                }                data.push(change >= 0 ? [new Date(date), high, open, close, low] : [new Date(date), low, open, close, high]);            });            this.setState({ data, loading: false, maxPrice, minPrice });        });    }    componentDidUpdate(prevProps, prevState, snapshot) {        if (this.props.stockInfo.symbol !== prevProps.stockInfo.symbol) {            this.setState({ loading: true, data: undefined, inputCount: "" });            axios.get(`https://financialmodelingprep.com/api/v3/historical-price-full/${this.props.stockInfo.symbol}?timeseries=30`).then(responce => {                let data = [['day', responce.data.symbol, responce.data.symbol, responce.data.symbol, responce.data.symbol]],                    historical = responce.data.historical,                    maxPrice = 0,                    minPrice = Infinity;                historical.forEach(({ date, open, high, low, close, change }) => {                    if (high > maxPrice) {                        maxPrice = high;                    }                    if (low < minPrice) {                        minPrice = low;                    }                    data.push(change >= 0 ? [new Date(date), high, open, close, low] : [new Date(date), low, open, close, high]);                });                this.setState({ data, loading: false, maxPrice, minPrice });            });        }    }    handleInput = event => {        this.setState({ inputCount: event.target.value });    };    handleClick = (symbol, inputCount, price, transactionType) => event => {        this.setState({ inputCount: 0 });        this.context.setTransaction(            symbol,            inputCount,            price,            transactionType        )    };    isDisable = () => {        const { inputCount } = this.state;        return (!inputCount || Number.isNaN(parseInt(inputCount)) || inputCount === "0" || inputCount < 0);    };    render() {        const locale = Locale.stockInfo;        const {            symbol,            profile: {                image,                companyName,                price,                description,                changes,                changesPercentage            }        } = this.props.stockInfo;        let { data, loading, inputCount, maxPrice, minPrice } = this.state;        return (            <div className="stock-info">                <div className="stock-info__header">                    <div className="stock-info__header-left">                        <div className="stock-info__title-box">                            <img className="stock-info__img" src={image} alt={symbol}/>                            <h1 className="stock-info__title">{companyName} | {symbol}</h1>                        </div>                        <p className="stock__count">{this.context.windowedCount} items(s)</p>                    </div>                    <div className="stock-info__header-right">                        <p className="stock-info__price">{price}$</p>                        <div className="stock__changes-box">                            <svg                                className={classNames('stock__caret', {                                    'down': parseFloat(changes) < 0,                                    'up': parseFloat(changes) > 0                                })                                }                                xmlns="http://www.w3.org/2000/svg"                                width="10"                                height="10"                            >                                <path fillRule="evenodd" d="M4.51 5.018L0 0h9.02z"/>                            </svg>                            <span                                className={classNames('stock__changes', {                                    'down': parseFloat(changes) < 0,                                    'up': parseFloat(changes) > 0                                })                                }                            >{changes}</span>                            <span className={classNames('stock__percentage', {                                'down': parseFloat(changes) < 0,                                'up': parseFloat(changes) > 0                            })                            }>{changesPercentage}</span>                        </div>                    </div>                </div>                <div className="stock-info__content-box">                    <p className="stock-info__profile">{description}</p>                </div>                <div className="stock-info__transaction-box">                    <div className="stock-info__input-box">                        <input                            className="stock-info__input"                            type='number'                            min='0'                            placeholder='0'                            value={this.state.inputCount}                            onChange={this.handleInput}                        />                        {this.isDisable() || <p className="input-box-sum">{(Number(inputCount) * price).toFixed(2)}$</p>}                    </div>                    <div className="stock-info__button-box">                        <button                            className="button button-sell"                            onClick={this.handleClick(                                symbol,                                Number(inputCount),                                price,                                "sell"                            )}                            disabled={this.isDisable() || inputCount > this.context.windowedCount}                        >                            {locale.buttonSell}                        </button>                        <button className="button button-buy"                                onClick={this.handleClick(                                    symbol,                                    Number(inputCount),                                    price,                                    "buy"                                )}                                disabled={this.isDisable()}                        >                            {locale.buttonBuy}                        </button>                    </div>                </div>                {loading && <Loader/>}                {data && !loading && <Chart                    chartType="CandlestickChart"                    width="90%"                    height="60%"                    data={data}                    loader={<Loader/>}                    options={{                        /*animation: {                            duration: 500,                            easing: 'linear',                            startup: true,                        },*/                        backgroundColor: "none",                        candlestick: {                            fallingColor: { strokeWidth: 0, fill: '#a52714' }, // red                            risingColor: { strokeWidth: 0, fill: '#0f9d58' }, // green                        },                        chartArea: { width: '70%', height: '70%' },                    }}                    rootProps={{ 'data-testid': '3' }}                    chartPackages={['corechart', 'controls']}                    controls={[                        {                            controlType: 'ChartRangeFilter',                            options: {                                filterColumnIndex: 0,                                ui: {                                    chartType: 'LineChart',                                    chartOptions: {                                        backgroundColor: "none",                                        vAxis: { viewWindow: { min: minPrice, max: maxPrice } },                                        width: 700,                                        chartArea: { width: '90%', height: '40%' },                                    },                                    chartView: {                                        columns: [0, 1]                                    },                                },                            },                            controlPosition: 'bottom',                            controlWrapperParams: {                                state: {                                    range: { start: new Date(data[0][0]), end: new Date() },                                },                            },                        },                    ]}                />}            </div>        );    }}export default StockInfo;